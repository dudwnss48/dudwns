열거형
			- 열거형의 여러 개의 상수를 빠르게 정의할 수 있다.
			- 열거형의 정의
						enum 열거형이름 {
									상수명, 상수명, 상수명, ...
						}
			- 작성 예)
						enum CustomerFrade {
								BRONZE, SILVER, GOLD, VIP, VVIP
								* 각각의 항목은 CustomerGrade의 상수가 된다.
								* 각각의 항목은 정의된 순서대로 0부터 시작하는 순서값을 가진다.
						}
열거형의 사용
		public class Customer {
					private String name;
					private String email;
					private CustomerGrade grade;		// 열거형의 상수값을 담는 필드
					
					 public void setGrade(CustomerGrade grade) {
					 		this.grade = grade;
					 }
					 public CustomerGrade grade() {
					 		return grade;
					 }
		}
		* 생성자에서 사용하기
		Customer c1 = new Customer("김유신", "kim@gmail.com", CustomerGrade.VIP);
		Customer c2 = new Customer("강감찬", "kang@gmail.com", CustomerGrade.BRONZE);
		* 대입연산에서 사용하기
		CustomerGrade grade = CustomerGrade.VIP;
		* 비교연산에서 사용하기
		if (c1.getGrade() == c2.getGrade()) { ... } // 열거형의 상수값은  == 연산자로 비교할 수 있다.

멤버를 가진 열거형
		enum Grade {
					// 해당 등급 고객의 최소 적립포인트
					BRONZE(1), SILVER(2), GOLD(5), VIP(10), VVIP(30);
						
					private final int point;	// 상수의 값이어서 값이 초기화괸 이후에는 변경할 수 없도록 final로 정의
					Grade(int point) {			// 생성자의 접근제한자는 private만 사용가능하다.
								this.point = point;
					}
					public int getPoint() {	// 상수의 값을 반환하는 getter 메소드다. setter는 정의할 필요없다.
							return point;
					}
		}

멤버를 가진 열거형의 사용
		public class Customer {
				private string name;
				private string email;
				private Grade grade;
				
				// 생성자, getter/setter는 지면상 생략
		}
		
		Customer c1 = new Customer("홍길동", "hong@gmail.com", Grade.BRONZE);		
		Customer c2 = new Customer("김유신", "kys@gmail.com", Grade.GOLD);
		system.out.println("홍길동 고객의 적립률: " + c1.getGrade().getPoint());		
		
		
		
		
		
		
		
			
			- 열거형은 컴파일시 값이 체크된다.
			- 열거형은 java.lang.Enum 클래스로부터 다양한 메소드를 상속받았다.
					String name()
					int ordinal()
					static T valueOf(String name)
					static T[] values()