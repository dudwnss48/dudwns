CSS(Cascading Style Sheets)
	- HTML 문서가 웹브라우져의 화면, 인쇄물 혹은 여러 미디어에 어떻게 표현될지를 정의하는 언어다.
	- CSS는 화면의 레이아웃, 이미지의 크미나 위치, 에니메이션 효과, 3D효과 등을 설정할 수 있다.
	- HTML 문서에 대한 디자인적 요소를 담당한다.
	- 문법
		Selector(선택자)		Declaration(CSS 선언)
		h1			{color:blue; font-size:12px;}
		* 선택자 - 스타일을 적용할 대상 엘리먼트(태그)를 지정한다.
		* CSS 선언 - 선택자에서 지정한 엘리먼트에 적용할 스타일을 선언한다.
			      각각의 CSS선언은 세미콜론으로 구분한다.
			      CSS선언은 PropertyName:PropertyValue로 구성된다.
			      color:blue; -> propertyName은 color, propertyValue는 blue다.
			      PropertyName은 CSS 문법에 의해 미리 결정되어 있고, 
			      각 PropertyName에 맞는 PropertyValue도 사용할 수 있는 값들이 정해져 있다.
	- CSS 적용하기
		* Inline CSS
			- 하나의 엘리먼트에만 적용할 스타일을 정의할 때 사용한다.
			- 엘리먼트에 CSS선언을 정의하는 것
			- 예) 
				<h1 style="color:red; font-size:12px;">컨텐츠</h1>
				* h1 태그에만 스타일이 적용된다.
		* Internal CSS
			- 하나의 HTML문서에만 적용할 스타일을 정의할 때 사용한다.
			- HTML문서의 헤더부분에서 <style>태그 안에 CSS선언을 정의하는 것
			- 예) 
				<style>
				h1 {color:red; font-size:12px;}
				p {margin: 10px; padding:6px;}
				</style>
				* HTML문서에 있는 모든<h1>, <p> 태그에 스타일이 적용된다.
		* External CSS
			- 프로젝트 내의 모든 HTML문서에 적용할 스타일을 정의할 때 사용한다.
			- 별도의 css파일에 CSS선언을 정의하고, <link>태그를 이용해서
			  css파일을 html문서와 연결시킨다.
			- 예)
				style.css 파일
					h1 {color:red; font-size:12px;}
					p {margin: 10px; padding:6px;}
				html문서
					<link rel="stylesheet" type="text/css" href="style.css">
		* 적용 우선 순위
			Inline Style >> Internale Style == External Style >> 브라우저 기본 스타일
	-- CSS에 주석(Comments) 달기
		*  자바스크립트의 주석과 유사하다.
		* 예)
			/* 주석입니다. */
			h1 {color:red; font-size:12px;}
			p {margin: 10px; padding:6px;}
CSS의 선택자
- 기본 선택자
-----------------------------------------------------------------------------------------------------------------------------------------
선택자		작성예시			설명
-----------------------------------------------------------------------------------------------------------------------------------------
*		* {style}			모든 엘리먼트를 선택
tag		p {style}			모든 p 엘리먼트를 선택
.class		.hot {스타일}		class속성값에 hot을 포함하고 있는 모든 엘리먼트를 선택
#id		#wrapper {스타일}	id="wrapper"인 엘리먼트 하나 선택
tag, tag		div, p {스타일}		모든 div, 모든 p 엘리먼트를 선택
.class, .class	.hot, .new {스타일}	class속성값에 hot혹은 new를 포함하고 있는 모든 엘리먼트를 선택
tag.class		div.hot {스타일}		div중에서 class속성값에 hot을 포함하고 있는 모든 엘리먼트를 선택
.class.class	.hot.new {스타일}		class속성값에 hot과 new를 모두 포함하고 있는 모든 엘리먼트를 선택
-----------------------------------------------------------------------------------------------------------------------------------------

- 조합 선택자 (공백, >, +, ~ 등의 기호를 이용해서 2개 이상의 기본선택자를 조합시킨 것)
-----------------------------------------------------------------------------------------------------------------------
선택자		작성예시			설명
-----------------------------------------------------------------------------------------------------------------------
공백(후손 선택자)
tag tag		div p			div의 후손 중에서 모든 p를 선택
.class .class	.news .hot		class에 news를 포함하고 있는 엘리먼트의 후손 중에서 class에 hot을 포함하고 있는 것 전부 선택
.class tag	.news p			class에 news를 포함하고 있는 엘리먼트의 후손 중에서 모든 p 선택
#id tag		#footer p			id="footer"인 엘리먼트의 후손 중에서 모든 p 선택
#id .class	#header .menu		id="header"인 엘리먼트의 후손 중에서 class에 menu를 포함하고 있는 것 전부 선택
> (자식 선택자) 	* 5가지의 조합중 하나만 예시로 작성함.
tag > tag		div > p			div의 자식중에서 모든 p를 선택
+ (인접한 형제 선택자)
tag + tag		h3 > p			h3 바로 다음에 있는 p를 선택
~ (형제 선택자)
tag ~ tag	h3 ~ p			h3 다음에 있는 모든 p를 선택
-----------------------------------------------------------------------------------------------------------------------

- 속성 선택자
-----------------------------------------------------------------------------------------------------------------------
선택자		작성예시			설명
-----------------------------------------------------------------------------------------------------------------------
[attr]		[name]			name속성을 가진 모든 엘리먼트를 선택한다.
[attr="value"]       input[type="text"]		input태그 중에서 type="text"인 모든 엘리먼트 선택
[attr^="val"]	a[href^="http"]		a태그 중에서 href속성값이 http로 시작하는 모든 엘리먼트 선택
[attr$="val"]	a[href$="net"]		a태그중에서 href 속성값이 net으로 끝나는 모든 엘리먼트 선택
[attr*="val"]	a[title*="학교"]		a태그 중에서 title속성값에 "학교"라는 문자를 포함하고 있는 모든 엘리먼트 선택
[attr~="val"]	a[title~="학교"]		a태그 중에서 title속성값에 "학교"라는 문자를 공백으로 구분된 단어로 포함하고 있는 모든 엘리먼트 선택
-----------------------------------------------------------------------------------------------------------------------

- 필터 선택자
-----------------------------------------------------------------------------------------------------------------------
선택자		작성예시			설명
-----------------------------------------------------------------------------------------------------------------------
:first-child	p:first-child		p중에서 부모를 기준으로 첫번째 자식 엘리먼트인 p를 선택한다.
:last-child	p:last-child		p중에서 부모를 기준으로 마지막번째 자식 엘리먼트인 p를 선택한다.
:nth-child(n)	p:nth-child(2)		p중에서 부모를 기준으로 두번째 자식 엘리먼트인 모든 p를 선택한다.
		p:nth-child(odd)		p중에서 부모를 기준으로 홀수번째 자식엘리먼트인 모든 p를 선택한다.
		p:nth-child(even)		p중에서 부모를 기준으로 짝수번째 자식엘리먼트인 모든 p를 선택한다.
:not(selector)	p:not(:first-child)		p중에서 부모를 기준으로 첫번째 자식이 아닌 모든 p를 선택한다.
-----------------------------------------------------------------------------------------------------------------------

- 가상 선택자
-----------------------------------------------------------------------------------------------------------------------
선택자		작성예시			설명
-----------------------------------------------------------------------------------------------------------------------
:hover		a:hover			a중에서 마우스포인터가 올라가 있는 것 선택		
:link		a:link			a중에서 방문한 적이 없는 링크
:visited		a:visited			a중에서 방문한 적이 있는 링크
:active		a:active			a중에서 지금 클릭하는 링크

:hover		div:hover			div중에서 마우스포인터가 올라가 있는 것 선택
-----------------------------------------------------------------------------------------------------------------------

- 선택자의 우선순위
	- 선택자의 우선순위는 하나의 엘리먼트에 서로 다른 두 개 이상의 선택자에 의해
	  동일한 CSS 선언이 적용되고 있을 때 어느 선택지가 우선순위가 높은지를 구별하는 것이다.
	- 선택자 우선순위 계산 방식
		* 1순위: !important를 포함하고 있는 CSS 선언
		* 2순위: inline CSS방식으로 지정한 CSS 선언
		* 3순위: 아이디 선택자로 지정한 CSS 선언
		* 4순위: 클래스/속성/필터/가상 선택자로 지정한 CSS 선언
		* 5순위: 태그 선택자로 지정한 CSS 선언
		* 6순위: 전체 선택자로 지정한 CSS 선언

- CSS 색상
	* 영어식 색상명으로 색을 지정할 수 있다.
		p {color: red; }
	* RGB 색상으로 색을 지정할 수 있다.
		- rgb(red, green, blue)
		- rgb(red, green, blue)의 각 파라미터에 0~255까지 정수로 색상을 지정할 수 있다.
		rgb(0, 0, 0)	- 검정색
		rgb(255, 0, 0)	- 빨강색
		rgb(0, 255, 0)	- 초록색
		rgb(0, 0, 255)	- 파랑색
		rgb(255, 255, 255)	- 흰색
		-사용예
		p {color:rgb(100, 200, 100);}
	* 16진수로 색을 지정할 수 있다.
		- #RRGGBB
		- 각가의 문자자리에 0~F, 0~f까지 16진수로 색상을 지정할 수 있다.
		#000000		- 검정색
		#ff0000		- 빨강색
		#00ff00		- 초록색
		#0000ff 		- 파랑색
		#ffffff		- 흰색
		- 각 색상별 값이 동일한 경우 한 번만 적을 수 있다.
		#ffffff		#fff
		#ffaa11		#fa1
		- 6자리값이 모두 같은 값인 경우는 항상 무채색이다.
		#000000 		검정색
		#666666		옅은 거
		#eeeeee		밝은 회색
		- 사용예
		p {color: #ff0000; }
		p {color: #foo; }

- CSS 박스모델
	- 모든 HTML 엘리먼트(태그)가 화면에 표시될때는 사각형의 박스처럼 다루어진다.
	- 화면의 디자인, 레이아웃을 구성할 때 HTML을 박스의 형태로 다루게 되는데, 이를 CSS BoxModel이라고 한다.
	- BoxModel의 구성
		- content :  엘리먼트가 실제로 포함하고 있는 내용(텍스트, 이미지)
		- padding : content와 border사이의 여백
		- border   : 엘리먼트의 테두리
		- margin   : 엘리먼트의 바깥여백, 다른 엘리먼트와의 경계
	- BoxModel에서 box-sizing 설정하기
		- box-sizing="content-box" 일 떼
			* width로 설정한 너비가 content의 너비가 된다.
			* 실제 엘리먼트의 너비
				margin-left + border-left + padding-left
				+ width + padding-right + border-right + margin-right;
			* 기본값은 content-box다.
		- box-sizing="border-box" 일 때
			* width로 설정한 너비가 border + padding + content의 총 너비가 된다.
			* 실제 엘리먼트의 너비
				margin-left + width + margin-right;
			* 엘리먼트의 크기를 계산하기가 간편하고, 화면의 레이아웃을 구성하기도 간편하다.
- CSS Position
	- css Position은 엘리먼트의 위치를 결정하는 css property다.
	- css Position의 값
		- position="static";
			* position 속성의 default값
			*  엘리먼트가 왼쪽에서 오른쪽 방향으로, 위에서 아래방향으로 배치된다.
		- position="relative";
			* static이었을 때의 위치를 기준으로 top, right, bottom, left
			   방향으로 지정된 픽셀만큼 엘리먼트의 위치를 이동시킬 수 있다.
		- position="absolute";
			* 부모엘리먼트의 position속성값이 relative, absolute, fixed 중 하나로 설정되어 있어야 하고,
			   부모엘리먼트를 기준으로 엘리먼트의 위치를 이동시킬 수 있다.
		- position="fixed";
			* 엘리먼트의 위치를 고정시킨다.
			* 내비게이션, 퀵메뉴, 배너광고 등을 고정시킬때 사용한다.

























































